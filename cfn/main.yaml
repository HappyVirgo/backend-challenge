AWSTemplateFormatVersion: "2010-09-09"
Description: Create the lambda function to capture the listen data and store in s3

Parameters:
  CodeBucket:
    Description: Location of zip containing listen lambda
    Type: String

  StackPrefix:
    Description: Prefix for all stack resources
    Type: String

Resources:
  SurveyResultsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub ${StackPrefix}-Table
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  LambdaAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${StackPrefix}-API
      Description: !Sub ${StackPrefix}-API
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  PostResultsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "LambdaAPI"
      ParentId: !GetAtt "LambdaAPI.RootResourceId"
      PathPart: postresults

  GetResultsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "LambdaAPI"
      ParentId: !GetAtt "LambdaAPI.RootResourceId"
      PathPart: getresults

  PostResultsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: PostResultsRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: listenCaptureSurveyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  Fn::Sub:
                    - arn:aws:s3:::${StackPrefix}-Table/*
                    - bucket_name:
                        Ref: StackPrefix

  PostResultsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to capture data
      FunctionName: !Sub ${StackPrefix}-PostResults
      Handler: main
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - PostResultsRole
          - Arn
      Runtime: go1.x
      Timeout: 10
      Code:
        S3Bucket:
          Ref: CodeBucket
        S3Key: src/postresults.zip
      Environment:
        Variables:
          TableName: !Sub ${StackPrefix}-Table

  PostResultsOption:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref "PostResultsResource"
      RestApiId: !Ref "LambdaAPI"
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  PostResults:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - PostResultsLambdaFunction
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackPrefix}-PostResults/invocations"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId: !Ref "PostResultsResource"
      RestApiId: !Ref "LambdaAPI"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  SurveyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostResultsOption
      - PostResults
    Properties:
      RestApiId:
        Ref: LambdaAPI
      StageName: Prod

  GatewayPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PostResultsLambdaFunction
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackPrefix}-PostResults
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LambdaAPI}/*
